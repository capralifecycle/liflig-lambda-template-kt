<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>no.liflig</groupId>
    <artifactId>kotlin-parent</artifactId>
    <version>2.20240723.014517</version>
    <relativePath/>
  </parent>

  <groupId>no.liflig.example</groupId>
  <artifactId>liflig-lambda-template-kt</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <properties>
    <!-- Overwritten in ci-build profile -->
    <build.commit>LOCAL</build.commit>
    <build.branch>LOCAL</build.branch>
    <build.number>0</build.number>

    <!-- IntelliJ default value for `maven.build.timestamp.format` is apparently `yyyyMMdd-HHmm`. -->
    <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'Z'</maven.build.timestamp.format>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <kotlin.version>2.1.0</kotlin.version>
    <java.version>17</java.version>
    <kotlin.compiler.jvmTarget>${java.version}</kotlin.compiler.jvmTarget>
    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>

    <!-- Liflig -->
    <liflig-properties.version>2.20250110.084847</liflig-properties.version>
    <liflig-logging.version>2.20250110.050020</liflig-logging.version>
    <liflig-snapshot-test.version>1.20240905.231604</liflig-snapshot-test.version>

    <!-- AWS -->
    <aws-lambda-events.version>3.14.0</aws-lambda-events.version>

    <!-- Serialization -->
    <kotlinx-serialization.version>1.7.3</kotlinx-serialization.version>
    <jackson.version>2.18.2</jackson.version>

    <!-- Logging -->
    <slf4j.version>2.0.16</slf4j.version>
    <logback.version>1.5.16</logback.version>
    <logstash-logback-encoder.version>8.0</logstash-logback-encoder.version>
    <opentelemetry.version>1.46.0</opentelemetry.version>
    <janino.version>3.1.12</janino.version>

    <!-- Other -->

    <!-- Transitive dependencies (must specify these to satisfy Maven Enforcer) -->
    <httpcore.version>4.4.16</httpcore.version>
    <commons-codec.version>1.17.2</commons-codec.version>

    <!-- Testing -->
    <assertj.version>3.27.3</assertj.version>
    <junit.version>5.11.4</junit.version>
    <mockk.version>1.13.16</mockk.version>

    <!-- Maven plugins -->
    <spotless-maven-plugin.version>2.44.2</spotless-maven-plugin.version>
    <ktfmt.version>0.46</ktfmt.version>
    <sonar.version>3.11.0.3922</sonar.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Serialization -->
      <dependency>
        <groupId>org.jetbrains.kotlinx</groupId>
        <artifactId>kotlinx-serialization-bom</artifactId>
        <version>${kotlinx-serialization.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson</groupId>
        <artifactId>jackson-bom</artifactId>
        <version>${jackson.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Logging -->
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-bom</artifactId>
        <version>${slf4j.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-bom</artifactId>
        <version>${opentelemetry.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Testing -->
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!--
        The AWS SDK (used by liflig-properties) uses different versions of these libraries, so we need to specify which
        ones to use.
      -->
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>${httpcore.version}</version>
      </dependency>
      <dependency>
        <groupId>commons-codec</groupId>
        <artifactId>commons-codec</artifactId>
        <version>${commons-codec.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Kotlin -->
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${kotlin.version}</version>
    </dependency>

    <!-- Liflig -->
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>properties</artifactId>
      <version>${liflig-properties.version}</version>
    </dependency>
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>liflig-logging</artifactId>
      <version>${liflig-logging.version}</version>
    </dependency>

    <!-- AWS -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-lambda-java-events</artifactId>
      <version>${aws-lambda-events.version}</version>
    </dependency>

    <!-- Serialization -->
    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-serialization-json</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
    </dependency>

    <!-- Logging -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
      <scope>runtime</scope>
    </dependency>
    <!-- JSON encoding of logs -->
    <dependency>
      <groupId>net.logstash.logback</groupId>
      <artifactId>logstash-logback-encoder</artifactId>
      <version>${logstash-logback-encoder.version}</version>
    </dependency>
    <!-- Needed for if/else in logback.xml, which we use to separate local/production log formats -->
    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
      <version>${janino.version}</version>
    </dependency>
    <!-- Needed by liflig-properties when loading parameters from AWS -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.mockk</groupId>
      <artifactId>mockk-jvm</artifactId>
      <version>${mockk.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- For testing JSON -->
    <dependency>
      <groupId>no.liflig</groupId>
      <artifactId>snapshot-test</artifactId>
      <version>${liflig-snapshot-test.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>github</id>
      <url>https://maven.pkg.github.com/capralifecycle/*</url>
    </repository>
  </repositories>

  <build>
    <resources>
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
      </resource>
      <resource>
        <!--
          Ensure variables are replaced in application.properties
          For more details, see:
          https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
        -->
        <filtering>true</filtering>
        <directory>${project.basedir}/src/main/resources-filtered</directory>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>

        <configuration>
          <jvmTarget>${java.version}</jvmTarget>
          <compilerPlugins>
            <plugin>kotlinx-serialization</plugin>
          </compilerPlugins>
        </configuration>

        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-serialization</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>

        <executions>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <phase>compile</phase>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
            <phase>test-compile</phase>
          </execution>
        </executions>
      </plugin>

      <!-- Plugin for creating self-contained jar file (fat-jar / uber-jar) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <filters>
            <filter>
              <artifact>*:*</artifact>
              <excludes>
                <exclude>META-INF/*.SF</exclude>
                <exclude>META-INF/*.DSA</exclude>
                <exclude>META-INF/*.RSA</exclude>
              </excludes>
            </filter>
          </filters>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>shade</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <filters>
                <!-- Excluding signed manifest files from dependencies -->
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
        Enforces proper Maven dependency management, to avoid dependency resolution errors at runtime.
        See https://liflig.atlassian.net/wiki/spaces/CALS/pages/59737059/Improving+dependency-management+in+Kotlin+projects+using+the+maven-enforcer-plugin#Plugin-Configuration
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <banDuplicatePomDependencyVersions/>
                <dependencyConvergence/>
                <requireUpperBoundDeps/>
                <banDynamicVersions>
                  <allowSnapshots>true</allowSnapshots>
                </banDynamicVersions>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Jacoco for test coverage reports. Can be used by sonarcloud.io -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.12</version>
        <executions>
          <execution>
            <id>jacoco-initialize</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-site</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.2.1</version>
        <executions>
          <execution>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <outputFile>${project.build.outputDirectory}/pom.properties</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Spotless with ktfmt for code style -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless-maven-plugin.version}</version>
        <configuration>
          <formats>
            <format>
              <includes>
                <include>*.md</include>
                <include>.gitignore</include>
              </includes>
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <spaces>true</spaces>
                <spacesPerTab>2</spacesPerTab>
              </indent>
            </format>
          </formats>
          <kotlin>
            <ktfmt>
              <version>${ktfmt.version}</version>
              <style>DEFAULT</style>
            </ktfmt>
          </kotlin>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>validate</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>

    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
  </build>

  <profiles>
    <profile>
      <id>ci-build</id>
      <activation>
        <property>
          <name>env.CI</name>
        </property>
      </activation>
      <properties>
        <!--suppress UnresolvedMavenProperty -->
        <build.commit>${env.GIT_COMMIT_SHA}</build.commit>
        <!--suppress UnresolvedMavenProperty -->
        <build.branch>${env.BRANCH_NAME}</build.branch>
        <!--suppress UnresolvedMavenProperty -->
        <build.number>${env.RUN_NUMBER}</build.number>
      </properties>
    </profile>

    <profile>
      <id>sonarcloud</id>
      <activation>
        <property>
          <name>env.SONARCLOUD_TOKEN</name>
        </property>
      </activation>
      <properties>
        <sonar.organization>capralifecycle</sonar.organization>
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.projectKey>capralifecycle_my_project_key_here</sonar.projectKey>
        <sonar.token>${env.SONARCLOUD_TOKEN}</sonar.token>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>${sonar.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>sonar</goal>
                </goals>
                <phase>verify</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
